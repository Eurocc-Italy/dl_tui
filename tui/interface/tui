#!/usr/bin/env python
"""
Text user interface for the DTaaS service

!!! WIP !!!

Author: @lbabetto
"""

import os
import sys
from tui.core.db import MONGODB_URI
from tui.core.hpc import launch_job
from pymongo import MongoClient

import logging

logger = logging.getLogger(__name__)


print("")
print("  ┌─────────────────────────────────────────────────┐")
print("  │ Digital Twin as a Service - Text User Interface │")
print("  └─────────────────────────────────────────────────┘")
print("")

USER = "user"
PASSWORD = "passwd"
IP = "localhost"
PORT = "27017"

MONGODB_URI = f"mongodb://{USER}:{PASSWORD}@{IP}:{PORT}/"

client = MongoClient(MONGODB_URI)


def print_info():
    """Print database info (available databases, collections, keywords)"""
    print("\n" + "─" * os.get_terminal_size()[0])
    print("\nDATABASES:")
    databases = []
    for db in client.list_database_names():
        if db not in ["admin", "config", "local"]:
            databases.append(db)

            print(f"  - {db}")

    print("\n" + "─" * os.get_terminal_size()[0])
    for db in databases:
        print(f"\nCOLLECTIONS (database {db}):")
        for coll in client[db].list_collection_names():
            print(f"  - {coll}")

    print("\n" + "─" * os.get_terminal_size()[0])
    for db in databases:
        for coll in client[db].list_collection_names():
            keys = {}
            for entry in client[db][coll].find():
                for key in entry.keys():
                    if key not in keys.keys():
                        keys[key] = 0
                    else:
                        keys[key] += 1

            print(f"\nAvailable keys (DATABASE: {db} | COLLECTION: {coll}):\n")
            print("  key                entries")
            print("  --------------------------")
            for key, count in keys.items():
                print(f"  {key:20}{count}")


# Reading flags from CLI
flags = {
    "database": None,
    "collection": None,
    "filters": {},
    "script": None,
}
curr_flag = ""
for key in sys.argv[1:]:
    if key.startswith("--"):
        curr_flag = key.lstrip("-")
    else:
        if curr_flag == "filters":
            sep = key.find("=")
            flags[curr_flag].update({key[:sep]: key[sep + 1 :]})
        else:
            flags[curr_flag] = key

print(flags)

filtered = []
for entry in client[flags["database"]][flags["collection"]].find(flags["filters"]):
    filtered.append(entry["path"])

if flags["script"]:
    launch_job(flags["script"], filtered)
